//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RVazquezMedicamentoEntities : DbContext
    {
        public RVazquezMedicamentoEntities()
            : base("name=RVazquezMedicamentoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Medicamento> Medicamentoes { get; set; }
        public virtual DbSet<Presentacion> Presentacions { get; set; }
    
        public virtual int MedicamentoAdd(string nombre, string descripcion, Nullable<int> presentacion, string dosis, string nombreLaboratorio, Nullable<System.DateTime> fechaCaducidad)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var presentacionParameter = presentacion.HasValue ?
                new ObjectParameter("Presentacion", presentacion) :
                new ObjectParameter("Presentacion", typeof(int));
    
            var dosisParameter = dosis != null ?
                new ObjectParameter("Dosis", dosis) :
                new ObjectParameter("Dosis", typeof(string));
    
            var nombreLaboratorioParameter = nombreLaboratorio != null ?
                new ObjectParameter("NombreLaboratorio", nombreLaboratorio) :
                new ObjectParameter("NombreLaboratorio", typeof(string));
    
            var fechaCaducidadParameter = fechaCaducidad.HasValue ?
                new ObjectParameter("FechaCaducidad", fechaCaducidad) :
                new ObjectParameter("FechaCaducidad", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MedicamentoAdd", nombreParameter, descripcionParameter, presentacionParameter, dosisParameter, nombreLaboratorioParameter, fechaCaducidadParameter);
        }
    
        public virtual int MedicamentoDelete(Nullable<int> idMedicamento)
        {
            var idMedicamentoParameter = idMedicamento.HasValue ?
                new ObjectParameter("IdMedicamento", idMedicamento) :
                new ObjectParameter("IdMedicamento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MedicamentoDelete", idMedicamentoParameter);
        }
    
        public virtual int MedicamentoUpdate(Nullable<int> idMedicamento, string nombre, string descripcion, Nullable<int> presentacion, string dosis, string nombreLaboratorio, Nullable<System.DateTime> fechaCaducidad)
        {
            var idMedicamentoParameter = idMedicamento.HasValue ?
                new ObjectParameter("IdMedicamento", idMedicamento) :
                new ObjectParameter("IdMedicamento", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var presentacionParameter = presentacion.HasValue ?
                new ObjectParameter("Presentacion", presentacion) :
                new ObjectParameter("Presentacion", typeof(int));
    
            var dosisParameter = dosis != null ?
                new ObjectParameter("Dosis", dosis) :
                new ObjectParameter("Dosis", typeof(string));
    
            var nombreLaboratorioParameter = nombreLaboratorio != null ?
                new ObjectParameter("NombreLaboratorio", nombreLaboratorio) :
                new ObjectParameter("NombreLaboratorio", typeof(string));
    
            var fechaCaducidadParameter = fechaCaducidad.HasValue ?
                new ObjectParameter("FechaCaducidad", fechaCaducidad) :
                new ObjectParameter("FechaCaducidad", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MedicamentoUpdate", idMedicamentoParameter, nombreParameter, descripcionParameter, presentacionParameter, dosisParameter, nombreLaboratorioParameter, fechaCaducidadParameter);
        }
    
        public virtual ObjectResult<PresentacionGetAll_Result> PresentacionGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PresentacionGetAll_Result>("PresentacionGetAll");
        }
    
        public virtual ObjectResult<MedicamentoGetAll_Result> MedicamentoGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MedicamentoGetAll_Result>("MedicamentoGetAll");
        }
    
        public virtual ObjectResult<MedicamentoGetById_Result> MedicamentoGetById(Nullable<int> idMedicamento)
        {
            var idMedicamentoParameter = idMedicamento.HasValue ?
                new ObjectParameter("IdMedicamento", idMedicamento) :
                new ObjectParameter("IdMedicamento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MedicamentoGetById_Result>("MedicamentoGetById", idMedicamentoParameter);
        }
    }
}
